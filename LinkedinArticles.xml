This XML file does not appear to have any style information associated with it. The document tree is shown below.
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
<channel>
<title>
...
</title>
<description>
...
</description>
<link>https://iamdarshshah.hashnode.dev</link>
<generator>RSS for Node</generator>
<lastBuildDate>Mon, 27 Sep 2021 12:26:39 GMT</lastBuildDate>
<atom:link href="https://iamdarshshah.hashnode.dev/rss.xml" rel="self" type="application/rss+xml"/>
<language>
...
</language>
<ttl>60</ttl>
<item>
...
</item>
<item>
<title>
<![CDATA[ Optional Chaining in JavaScript ]]>
</title>
<description>
<![CDATA[ <p><em>Optional Chaining</em> (<code>?.</code>) concept was recently introduced in JavaScript ES2020, the new version of JavaScript is bringing improvements to the current implementations and makes our lives easier as a developer. ü§©</p> <blockquote> <p>You can check the new <a target="_blank" href="https://tc39.es/ecma262/2020/">ECMAScript 2020 (ES2020) language specification</a> &amp; <a target="_blank" href="https://github.com/tc39/proposal-optional-chaining">TC39 proposal</a>.</p> </blockquote> <p>In this article, we'll talk about <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">Optional Chaining in JavaScript</a>.</p> <h3 id="what-is-optional-chaining-in-javascript">What is Optional Chaining(?.) in JavaScript? ü§î</h3> <p>Optional Chaining operator allows us to access the nested object properties, without checking if the parent object exists. Thus, instead of throwing an error, it will return <code>undefined</code> if the parent object is <code>null</code> or <code>undefined</code>.</p> <p>The <code>?.</code> operator works in the same way as of <code>.</code> operator. The only difference here is instead of throwing an error if the reference is <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Glossary/nullish">nullish</a> (<code>null</code> or <code>undefined</code>), it will return a value of <code>undefined</code>. </p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js">object.value?.prop object.value?.[expr] object.value?.[index] object.func?.(args) </code></pre> <p><strong>Consider the following example:</strong></p> <pre><code class="lang-js"><span class="hljs-keyword">const</span> userInfo = { <span class="hljs-attr">firstName</span>: <span class="hljs-string">'Darsh'</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">'Shah'</span>, <span class="hljs-attr">details</span>: { <span class="hljs-attr">bio</span>: <span class="hljs-string">'Auth0 Ambassador | Postman Student Expert | Blogger | Speaker'</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">'Software Developer'</span> }, sayHello() { <span class="hljs-keyword">return</span> <span class="hljs-string">'Hey there!üëã'</span>; } }; </code></pre> <p>Now, what if we do this?</p> <pre><code class="lang-js"><span class="hljs-keyword">const</span> userTitle = userInfo.details &amp;&amp; userInfo.details.title; </code></pre> <p>We first check whether <code>details</code> property exists in <code>userInfo</code> &amp; then we assign <code>title</code> to the <code>userTitle</code> if it exists. Otherwise, <code>userTitle</code> will be <code>undefined</code>.</p> <p>Usually, we use the <code>&amp;&amp;</code> operator to avoid getting errors when the object is <code>null</code> or <code>undefined</code>. </p> <p>But this is tedious right?? üòì</p> <p>With the new JavaScript feature, We can use the Optional Chaining (<code>?.</code>) operator here to make it look more clear. ü§Ø</p> <pre><code class="lang-js"><span class="hljs-keyword">const</span> userTitle = userInfo.details?.title; </code></pre> <p>Is it for real??? üò≥</p> <p>Yes, this will work the same way we did with the <code>&amp;&amp;</code> operator. </p> <p>What happens is, <code>?.</code> operator will stop the evaluation if the part before <code>?.</code> is <code>undefined</code> or <code>null</code> and returns <code>undefined</code> rather than throwing an error.</p> <p><em>Here's the example:</em></p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1608201033218/lX19Sro14.png" alt="error.PNG" /></p> <blockquote> <p>Note: This will only work on nested properties. If we try to use it at the first level, it will throw an error if the object is not defined. Optional Chaining needs a parent object to look at first.</p> </blockquote> <p>In this example, <code>user</code> i.e., <code>parent object</code> is not defined and we're trying to use the Optional chaining operator. Thus, it will throw an error.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1608201660117/gPa_cmE_V.png" alt="error1.PNG" /></p> <p>Woo-Hoo!!üéâ There you go! Make use of it whenever there is a need. Hope this makes your work a bit easier. üéØ</p> <p><em>Thanks, for reading it till the end.</em> üôè</p> <hr /> <p>Hope you find that helpful! Let me know your thoughts on this in the comments section. Don't forget to share this article with your friends or colleagues. Feel free to connect with me on any of the platforms below! üöÄ</p> <p> <a target="_blank" href="https://twitter.com/iamdarshshah">Twitter</a> | <a target="_blank" href="https://www.linkedin.com/in/iamdarshshah/">LinkedIn</a> | <a target="_blank" href="https://github.com/iamdarshshah">GitHub</a> </p> <hr /> ]]>
</description>
<link>https://iamdarshshah.hashnode.dev/optional-chaining-in-javascript</link>
<guid isPermaLink="true">https://iamdarshshah.hashnode.dev/optional-chaining-in-javascript</guid>
<dc:creator>
<![CDATA[ Darsh Shah ]]>
</dc:creator>
<pubDate>Thu, 17 Dec 2020 11:35:10 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1608203976198/VKY-W2-HI.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Top Chrome Extensions Every Developer Should Use üõ† ]]>
</title>
<description>
<![CDATA[ <p>Do you want to use the Chrome web browser more effectively as a Developer? ü§Ø</p> <p>If you said <code>YES</code>, then this article is for you. We'll go through some of the best Google Chrome Extensions Every Developer should have.</p> <h3 id="why-to-make-use-of-google-chrome-and-its-extensions">Why to make use of Google Chrome &amp; its Extensions? ü§î</h3> <p>Google Chrome is a cross-platform web browser developed by Google. Since most users use the Chrome web browser, even we as a developer use Chrome as our primary browser, It allows us to access a massive repository of Chrome extensions and resources that make our everyday activities less of a hassle. There seems to be no further need for more software with built-in developer tools.</p> <p>Chrome extensions are only one of the many techniques that can be really helpful. Below is a list of the best extensions that we can make use of on a daily basis.</p> <h3 id="top-google-chrome-extensions-you-must-have">Top Google Chrome Extensions, you must have ü§©</h3> <ol> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp">ColorZilla</a> - With ColorZilla you can get a color reading from any point in your browser, quickly adjust this color and paste it into another program. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607251838715/ziEtQAYZC.jpeg" alt="1.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/coil/locbifcbeldmnphbgkdigjmkbfkhbnca">Coil</a> - Coil is a flat rate for Web Monetization. What that means is that you pay a fixed amount of money per month to Coil and Coil will stream money to websites as you browse. Coil builds on an open standard called <a target="_blank" href="webmonetization.org">Web Monetization</a>. This is a brand-new standard and not many websites support it yet. But it enables some amazing new experiences. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607252000065/6eqOuuGMz.jpeg" alt="2.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce">CSS Viewer</a> - A simple CSS property viewer. CSSViewer is a simple CSS properties viewer originally made by Nicolas Huon as a Firefox add-on (2006-2008). <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607252094632/qgKDCCZK2.jpeg" alt="3.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/dailydev-news-for-busy-de/jlmpjdjjbgclbocgajdjefcidcncaied">daily.dev</a> - daily.dev is the easiest way to stay updated on the latest programming news. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607252237309/GtGrjpFBD.jpeg" alt="4.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg">EditThisCookie</a> - EditThisCookie is a cookie manager. You can add, delete, edit, search, protect, and block cookies! <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607252444924/tnrLuJycg.jpeg" alt="5.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen">Grammarly</a> - Communicate With Impact. Ensure Everything You Write Comes Across The Way You Intend. Present Your Best Self Every Time You Type. Make Your Writing Clear and Engaging. Eliminate grammar errors. Easily improve any text. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607252584258/nQ3Vtsjdh.jpeg" alt="6.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh">JSON Viewer</a> - The most beautiful and customizable JSON/JSONP highlighter that your eyes have ever seen. It is a Chrome extension for printing JSON and JSONP. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607252683168/1AJrkWSW1.jpeg" alt="7.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/keywords-everywhere-keywo/hbapdpeemoojbophdfndmlgdhppljgmp">Keywords everywhere</a> - Keyword search volume, CPC, and competition for 15+ websites like Google‚Ñ¢ Search Console, YouTube‚Ñ¢, Amazon‚Ñ¢ &amp; more. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607252827536/C1b-4_b6E.jpeg" alt="8.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca">Momentum</a> - Replace a new tab page with a personal dashboard featuring to-do, weather, and inspiration. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607253013732/qrYbQsXwr.png" alt="9.PNG" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg">Wappalyzer</a> - Wappalyzer is a technology profiler that shows you what websites are built with. Find out what CMS a website is using, as well as any framework, eCommerce platform, JavaScript libraries, and many more. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607253155843/Fs_nvJEhC.png" alt="10.PNG" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi">React ‚Äì Developer Tools Extension</a> - React Developer Tools is a Chrome DevTools extension for the open-source React JavaScript library. It allows you to inspect the React component hierarchies in the Chrome Developer Tools. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607253248722/CGchwlXmt.jpeg" alt="11.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd">Redux dev tools</a> - The extension provides power-ups for your Redux development workflow. Apart from Redux, it can be used with any other architectures which handle the state. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607253327959/6nkOwopmb.jpeg" alt="12.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/vidiq-vision-for-youtube/pachckjkecffpdphbpmfolblodfkgbhl">vidIQ Vision for YouTube</a> - Do you want to know how to get more YouTube views, or discover the secrets to success behind your favorite YouTube channels and videos? vidIQ Vision for Chrome is a suite of powerful tools that every creator needs access to if they want to build their audience on YouTube. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607253424957/S4OuHxp6c.jpeg" alt="13.jpg" /></p> </li> <li><p><a target="_blank" href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm">WhatFont</a> - The easiest way to identify fonts on web pages. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607253500059/S2W5f_2Fb.jpeg" alt="14.jpg" /></p> </li> </ol> <blockquote> <p>NOTE: React &amp; Redux devtools Extensions are for those who works with React on daily basis. </p> </blockquote> <p>Congratulations!!ü•≥ You made it till the end. Hope you have now figured out what extensions you should use to make your life a bit easier than before.üòÑ</p> <blockquote> <p>Is there any other extension that you make use of? Please let me know in the comments section.‚úçÔ∏è</p> </blockquote> <p><em>Thanks, for reading it till the end.</em> üôè</p> <hr /> <p>Hope you find that helpful! Let me know your thoughts on this in the comments section. Don't forget to share this article with your friends or colleagues. Feel free to connect with me on any of the platforms below! üöÄ</p> <p> <a target="_blank" href="https://twitter.com/iamdarshshah">Twitter</a> | <a target="_blank" href="https://www.linkedin.com/in/iamdarshshah/">LinkedIn</a> | <a target="_blank" href="https://github.com/iamdarshshah">GitHub</a> </p> <hr /> ]]>
</description>
<link>https://iamdarshshah.hashnode.dev/top-chrome-extensions-every-developer-should-use</link>
<guid isPermaLink="true">https://iamdarshshah.hashnode.dev/top-chrome-extensions-every-developer-should-use</guid>
<dc:creator>
<![CDATA[ Darsh Shah ]]>
</dc:creator>
<pubDate>Sun, 06 Dec 2020 11:38:34 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1607254044627/gIG3pKCyC.png</cover_image>
</item>
<item>
<title>
<![CDATA[ Top VS Code Extensions Every Developer Should Use üõ† ]]>
</title>
<description>
<![CDATA[ <p>Are you looking for the amazing VS Code extensions that will help you be more productive while coding? ü§î</p> <p>If you said <code>Yes</code>, then you're at the right place. In this article, I'll be sharing top VS Code Extensions you must-have for making your life easier. üòõ</p> <h3 id="what-is-vs-code">What is VS Code? ü§Ø</h3> <p><strong>Visual Studio Code</strong> is a free source-code editor made by Microsoft for Windows, Linux, and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git.</p> <h3 id="why-vs-code">Why VS Code? üßê</h3> <p>Microsoft Visual Studio is a premium and most dominant IDE for programming which is profoundly prevalent among engineers.</p> <p>It contains a plethora of different kinds of tools and features which makes testing and compatibility even easier.</p> <p>Visual Studio Code is potentially the best JavaScript ide for Windows, Mac, and Linux. Nowadays, VS Code is one of the most popular ides used by developers.</p> <h3 id="top-vs-code-extensions-you-must-have">Top VS Code Extensions, you must have ü§©</h3> <ol> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments">Better Comments</a> - The Better Comments extension will help you create more human-friendly comments in your code. If you're the one who loves watching different colored comments, then check it out. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607017728100/WioXWReu2.png" alt="1.png" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a> - This extension allows matching brackets to be identified with colors. The user can define which characters to match, and which colors to use. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607017981626/4jyq8B7Pi.png" alt="2.PNG" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome">Debugger for Chrome</a> - A VS Code extension to debug your JavaScript code in the Google Chrome browser, or other targets that support the Chrome DevTools Protocol. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607018210846/N0vuUHjbO.gif" alt="3.gif" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets">ES7 React/Redux/GraphQL/React-Native snippets</a> - This extension will provide you JavaScript and React/Redux snippets in hand. So, no-more doubting your syntaxes. It will help you code quicker and in a more efficient manner. Also, it will save a lot of time while writing imports or react components (just for the sake of example). <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607018946871/nIkOt0DYx.png" alt="4.PNG" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a> - ESLint is a fantastic linter that picks up syntax errors for you to spot problems with your code before you run your code. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607020156128/OK1RYY1A_.png" alt="9.PNG" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=file-icons.file-icons">file-icons</a> - It provides unique file icons to quickly identify file type in the IDE. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607019122812/76YFjOk2D.png" alt="5.png" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens ‚Äî Git supercharged</a> - GitLens supercharges the Git capabilities built into Visual Studio Code. It helps you to visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607019325131/v0kfHg2UA.gif" alt="6.gif" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost">Import Cost</a> - This extension will display inline in the editor the size of the imported package. The extension utilizes webpack with babili-webpack-plugin in order to detect the imported size. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607019511801/g7ppxn4vL.png" alt="7.PNG" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow">indent-rainbow</a> - This extension colorizes the indentation in front of your text alternating four different colors on each step. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607019672886/V6IPWTFqq.png" alt="8.png" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a> - Launch a local development server with live reload feature for static &amp; dynamic pages. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607020306599/sbjaeP4w-.gif" alt="10.gif" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=ionutvmi.path-autocomplete">Path Autocomplete</a> - Provides path completion for visual studio code. I personally found this extension really helpful. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607020465554/7AhC4rHZz.gif" alt="11.gif" /></p> </li> <li><p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier</a> - Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary. <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607020589495/r27jdZMnb.gif" alt="12.gif" /></p> </li> </ol> <hr /> <h4 id="vs-code-theme-i-use">VS Code Theme I use üíú</h4> <p><a target="_blank" href="https://marketplace.visualstudio.com/items?itemName=sdras.night-owl">Night Owl</a> by <a target="_blank" href="https://twitter.com/sarah_edo">Sarah Drasner</a> - A VS Code theme for the night owls out there. Now introducing Light Owl theme for daytime usage. Decisions were based on meaningful contrast for reading comprehension and for optimal razzle-dazzle. ‚ú® <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1607020754862/FyYkLZiUE.png" alt="13.PNG" /></p> <p>These are the extensions that I make use of in my day to day work life. Woohoo! We did it! üéâ</p> <p>Are you done setting up your VS Code? Obviously, isn't it üëÄ </p> <blockquote> <p>Is there any other extension that you make use of while coding? Please let me know in the comments section.‚úçÔ∏è</p> </blockquote> <p><em>Thanks, for reading it till the end.</em> üôè</p> <hr /> <p>Hope you find that helpful! Let me know your thoughts on this in the comments section. Don't forget to share this article with your friends or colleagues. Feel free to connect with me on any of the platforms below! üöÄ</p> <p> <a target="_blank" href="https://twitter.com/iamdarshshah">Twitter</a> | <a target="_blank" href="https://www.linkedin.com/in/iamdarshshah/">LinkedIn</a> | <a target="_blank" href="https://github.com/iamdarshshah">GitHub</a> </p> <hr /> ]]>
</description>
<link>https://iamdarshshah.hashnode.dev/top-vs-code-extensions-every-developer-should-use</link>
<guid isPermaLink="true">https://iamdarshshah.hashnode.dev/top-vs-code-extensions-every-developer-should-use</guid>
<dc:creator>
<![CDATA[ Darsh Shah ]]>
</dc:creator>
<pubDate>Thu, 03 Dec 2020 19:01:52 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1607021747328/Wl5y2qUQo.png</cover_image>
</item>
<item>
<title>
<![CDATA[ JavaScript console API ]]>
</title>
<description>
<![CDATA[ <p>Are you someone who uses <code>console.log</code> to debug most of your code?ü§î</p> <p>If you said <code>yes</code>, you're in the right spot. By the end of this article, you would have heard about a variety of different <code>console</code> methods that you can use to make debugging the code a little simpler.ü§Ø</p> <blockquote> <p>Each developer (probably üòú) uses various <code>console</code> methods for logging or debugging their code. Whether or not you are using <code>console</code> methods, this article will help you understand the JavaScript <code>console</code> API. Make sure you read it right to the finish. üëÄ</p> </blockquote> <h3 id="console-object-in-javascript">üõ† Console Object in JavaScript</h3> <p>The <code>console</code> object in JavaScript offers access to the browser debugging console. It is primarily used to debug the code or log something out of the console. </p> <p>Working can differ from browser to browser, but there is a de facto collection of features that are usually offered.</p> <h3 id="web-console">‚öôÔ∏è Web Console</h3> <p>It's a tool which is been used to log information associated with the web page you've been working with. It also allows us to communicate with the web page by executing the JavaScript expression in the contents of the page.</p> <blockquote> <p>üìå NOTE: We'll use the <a target="_blank" href="https://developers.google.com/web/tools/chrome-devtools">Chrome DevTools</a> Console for this article. Check <a target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/API/console">MDN web docs</a>, if you want to know more about Browser Compatibility. </p> </blockquote> <h3 id="different-methods-associated-with-console-object">üßê Different methods associated with Console Object</h3> <ol> <li><p><code>console.assert()</code>: It will log an error message to the console if the Assertion is false. If the Assertion is valid, nothing will happen.</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.assert(assertion, obj1 [, obj2, ..., objN]); </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.assert(<span class="hljs-number">1</span> === <span class="hljs-number">2</span>, {<span class="hljs-attr">errorMessage</span>: <span class="hljs-string">"Values are not same."</span>}); </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606037275428/kFFOTG2qz.png" alt="1.PNG" /></p> <blockquote> <p>Assertion can be any boolean expression.</p> </blockquote> </li> <li><p><code>console.clear()</code>: This method is used to clear the console. The console will be cleared, in the case of Chrome a simple overlayed text will be printed like: <code>Console was cleared</code> while in firefox no message is returned.</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.clear(); </code></pre> </li> <li><p><code>console.count()</code>: Log the number of times this line has been called with the given label.</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.count([label]); <span class="hljs-comment">// You can pass any label or else it will take it as default.</span> </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.count(); <span class="hljs-comment">// it will be counted as default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greet</span>(<span class="hljs-params">msg</span>) </span>{ <span class="hljs-built_in">console</span>.count(msg); <span class="hljs-keyword">return</span> msg } greet(<span class="hljs-string">'hi'</span>); greet(<span class="hljs-string">'hello'</span>); <span class="hljs-built_in">console</span>.count(<span class="hljs-string">'hello'</span>); </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606038251423/74RLUexya.png" alt="2.PNG" /></p> <blockquote> <p>In short, <code>console.count()</code> will count the number of times this statement will be called with the <code>label</code> that is been passed.</p> </blockquote> </li> <li><p><code>console.error()</code>: Used for logging console error messages. Useful for debugging the code. The error message will be highlighted with a red color by default.</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.error(message); </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.error(<span class="hljs-string">'LOL: You really screwed up this time.üòÇ'</span>) </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606039394843/hNvkkBb3g.png" alt="3.PNG" /></p> </li> <li><p><code>console.group() and console.groupEnd()</code>: These methods allow us to group different console statements in a separate block, which will be indented.</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.group([label]); <span class="hljs-built_in">console</span>.groupEnd(); </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.group(<span class="hljs-string">'The outter level'</span>); <span class="hljs-built_in">console</span>.warn(<span class="hljs-string">'warning!'</span>); <span class="hljs-built_in">console</span>.error(<span class="hljs-string">'error occured'</span>); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'This is the end for this scope.'</span>); <span class="hljs-built_in">console</span>.groupEnd(); <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'new section'</span>); </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606040135578/t4IJC6CKS.png" alt="4.PNG" /></p> </li> <li><p><code>console.log()</code>: This method is used to log the output to the console. We can put any type inside the <code>log()</code>, be it a string, array, object, boolean, etc. </p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.log(param); </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">"hello"</span>, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], { <span class="hljs-attr">firstName</span>: <span class="hljs-string">"Darsh"</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">"Shah"</span> }, <span class="hljs-literal">true</span>); </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606040578237/o8vdUVsHy.png" alt="5.PNG" /></p> </li> <li><p><code>console.table()</code>: This method allows us to generate a table inside a console. The input must be an array or an object which will be shown as a table.</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.table(data); <span class="hljs-comment">// data must be of type array or object.</span> </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-keyword">const</span> first = [<span class="hljs-string">"hi"</span>, <span class="hljs-string">"hello"</span>]; <span class="hljs-keyword">const</span> second = { <span class="hljs-attr">firstName</span>: <span class="hljs-string">"Darsh"</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">"Shah"</span> }; <span class="hljs-built_in">console</span>.table(first); <span class="hljs-built_in">console</span>.table(second); </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606040986983/2IJT0E3u1.png" alt="6.PNG" /></p> </li> <li><p><code>console.time() and console.timeEnd()</code>: Whenever we want to know the amount of time spent by a specific block of code, we can use the time() and timeEnd() methods given by the javascript console object. They take a label that must be the same and the code inside may be anything (function, object, specific console, anything).</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.time(label); <span class="hljs-comment">// Your code goes here.</span> <span class="hljs-built_in">console</span>.timeEnd(label); </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.time(<span class="hljs-string">'execution'</span>); <span class="hljs-keyword">let</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fun is running'</span>); } <span class="hljs-keyword">let</span> fun2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'fun2 is running..'</span>); } fun(); <span class="hljs-comment">// calling fun(); </span> fun2(); <span class="hljs-comment">// calling fun2(); </span> <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'execution'</span>); </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606041505705/ejGFxkfMT.png" alt="7.PNG" /></p> </li> <li><p><code>console.trace()</code>: This method outputs the stack trace to the Web Console.</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.trace(); </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>{ <span class="hljs-built_in">console</span>.trace(); } bar(); } foo(); </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606041974459/HM8wILiKd.png" alt="8.PNG" /></p> </li> <li><p><code>console.warn()</code>: This method is used to log warning message to the console. By default, the warning message will be highlighted with yellow color.</p> <h4 id="syntax">Syntax</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.warn(msg); </code></pre> <h4 id="example">Example</h4> <pre><code class="lang-js"><span class="hljs-built_in">console</span>.warn(<span class="hljs-string">'This is a Warning!'</span>); </code></pre> <h4 id="output">Output</h4> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1606042258768/QItbhImql.png" alt="9.PNG" /></p> </li> </ol> <p>Woo-Hoo! You did it! üéä Now, you'll be able to make use of all these various <code>console</code> methods, which will in turn simplify the debugging portion for your application. </p> <p><em>Thanks, for reading it till the end.</em> üôè</p> <hr /> <p>Hope you find that helpful! Let me know your thoughts on this in the comments section. Don't forget to share this article with your friends or colleagues. Feel free to connect with me on any of the platforms below! üöÄ</p> <p> <a target="_blank" href="https://twitter.com/iamdarshshah">Twitter</a> | <a target="_blank" href="https://www.linkedin.com/in/iamdarshshah/">LinkedIn</a> | <a target="_blank" href="https://github.com/iamdarshshah">GitHub</a> </p> <hr /> <h4 id="references">References:</h4> <ol> <li>https://developer.mozilla.org/en-US/docs/Web/API/console</li> <li><a target="_blank" href="https://2ality.com/2013/10/console-api.html">2ality</a> by <a target="_blank" href="https://twitter.com/rauschma">Dr. Axel Rauschmayer</a> </li> <li>https://www.digitalocean.com/community/tutorials/js-console</li> <li>https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-developer-console</li> <li>Image Source: https://unsplash.com/photos/95YRwf6CNw8</li> </ol> ]]>
</description>
<link>https://iamdarshshah.hashnode.dev/javascript-console-api</link>
<guid isPermaLink="true">https://iamdarshshah.hashnode.dev/javascript-console-api</guid>
<dc:creator>
<![CDATA[ Darsh Shah ]]>
</dc:creator>
<pubDate>Sun, 22 Nov 2020 11:22:43 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1606043146756/mfWi3JnKS.jpeg</cover_image>
</item>
<item>
<title>
<![CDATA[ How to Add Your Recently Published Articles to Your GitHub Profile README using GitHub Actions ü§ñ ]]>
</title>
<description>
<![CDATA[ <p><em>Do you want to show off your articles on GitHub?</em> ü§≠ </p> <p>If you said <em><strong>YES</strong></em>, Then you're at the right place. By the end of this article, you'll have your latest articles listed on your GitHub Profile README.</p> <blockquote> <p>üìå TL;DR - Before we begin, You must have your GitHub account and make sure you've created your GitHub profile. If not, you can check this <a target="_blank" href="https://www.aboutmonica.com/blog/how-to-create-a-github-profile-readme">article</a> by <a target="_blank" href="https://twitter.com/waterproofheart">Monica Powell</a>.</p> </blockquote> <h3 id="lets-begin">üèÉüèºLet's Begin!!!</h3> <blockquote> <p>üí° If you're new to GitHub Actions, go check out the <a target="_blank" href="https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#:~:text=GitHub%20Actions%20are%20event%2Ddriven,executes%20a%20software%20testing%20script.">official documentation</a>.</p> </blockquote> <p>We'll be using <a target="_blank" href="https://github.com/gautamkrishnar/blog-post-workflow">blog-post-workflow</a> GitHub Action by <a target="_blank" href="https://twitter.com/gautamkrishnar">Gautam krishna R</a>. </p> <h4 id="how-to-use-this-github-action">ü§î How to use this GitHub Action?</h4> <ol> <li><p>Visit your GitHub Profile README repository</p> <pre><code class="lang-link">https://github.com/{USER-NAME}/{USER-NAME} </code></pre> </li> <li><p>You'll need to add the following section to your <strong>README.md</strong> file</p> <pre><code class="lang-js"># üì© Latest Blog Posts <span class="hljs-comment">// You can name it whatever you want.</span> &lt;!-- BLOG-POST-LIST:START --&gt; &lt;!-- BLOG-POST-LIST:END --&gt; </code></pre> </li> <li><p>Now, create a folder <code>.github</code> in the root directory &amp; within that directory create another folder named <code>workflows</code>. Now, inside the <code>workflows</code> directory create a new <a target="_blank" href="https://yaml.org/">YAML</a> file <code>blog-post-workflow.yml</code>. This is how your folder structure should look like:</p> <pre><code class="lang-js">.github ‚îî‚îÄ‚îÄ‚îÄworkflows blog-post-workflow.yml </code></pre> <blockquote> <p>NOTE: If you're struggling in creating a folder in the GitHub repository from a web app then check <a target="_blank" href="https://github.community/t/add-a-folder/2304">this</a> .</p> </blockquote> </li> <li><p>Add the following content in the <code>blog-post-workflow.yml</code> file</p> <pre><code class="lang-yml"><span class="hljs-attr">name:</span> <span class="hljs-string">Latest</span> <span class="hljs-string">blog</span> <span class="hljs-string">post</span> <span class="hljs-string">workflow</span> <span class="hljs-attr">on:</span> <span class="hljs-attr">schedule:</span> <span class="hljs-comment"># Run workflow automatically</span> <span class="hljs-comment"># This will make it run every hour</span> <span class="hljs-bullet">-</span> <span class="hljs-attr">cron:</span> <span class="hljs-string">'0 * * * *'</span> <span class="hljs-comment"># Run workflow manually (without waiting for the cron to be called), through the Github Actions Workflow page directly</span> <span class="hljs-attr">workflow_dispatch:</span> <span class="hljs-attr">jobs:</span> <span class="hljs-attr">update-readme-with-blog:</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">this</span> <span class="hljs-string">repo's</span> <span class="hljs-string">README</span> <span class="hljs-string">with</span> <span class="hljs-string">latest</span> <span class="hljs-string">blog</span> <span class="hljs-string">posts</span> <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span> <span class="hljs-attr">steps:</span> <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span> <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">gautamkrishnar/blog-post-workflow@master</span> <span class="hljs-attr">with:</span> <span class="hljs-comment"># Replace this URL with your rss feed URL/s</span> <span class="hljs-attr">feed_list:</span> <span class="hljs-string">"https://iamdarshshah.hashnode.dev/rss.xml"</span> </code></pre> </li> <li><p>Commit your code and wait for your actions to run automatically or here are the steps to trigger it manually:</p> <ul> <li><p>Click on <code>Actions</code>: <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1605724408453/Wo6QXLDyo.png" alt="Capture.PNG" /></p> </li> <li><p>Now, Click on <code>Latest blog post workflow</code>: <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1605724588566/mKiVUYqRu.png" alt="Capture-1.PNG" /></p> </li> <li><p>Then, click on <code>Run workflow</code> to trigger the GitHub Action: <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1605724752771/8k985nGoa.png" alt="Capture-3.PNG" /></p> </li> </ul> </li> </ol> <blockquote> <p>NOTE: You can add any popular blogging platform's RSS feed URL. (<a target="_blank" href="https://github.com/gautamkrishnar/blog-post-workflow#popular-sources">List of Platforms</a>) </p> </blockquote> <p>This is it! We did it. üéâ</p> <p>Now, you can check your GitHub Profile README that lists your latest published articles. üéä</p> <h4 id="this-is-how-it-should-look">üëÄThis is How it should look</h4> <p> <img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1605720484968/GPlrXMw7q.png" alt="cover image" /> </p> <blockquote> <p>‚öôÔ∏è If you want to customize your GitHub Action, then have a look at all available <a target="_blank" href="https://github.com/gautamkrishnar/blog-post-workflow#options">options</a> you can provide custom values to.</p> </blockquote> <p>Thanks, for reading it till the end. üôè</p> <hr /> <p>Hope you find it useful! Let me know your thoughts on this in the comments section. Don't forget to share this article with your friends or colleagues. Feel free to connect with me on any of the platforms below! üöÄ</p> <p> <a target="_blank" href="https://twitter.com/iamdarshshah">Twitter</a> | <a target="_blank" href="https://www.linkedin.com/in/iamdarshshah/">LinkedIn</a> | <a target="_blank" href="https://github.com/iamdarshshah">GitHub</a> </p> <hr /> <h4 id="references">References:</h4> <ul> <li>GitHub Action - https://github.com/gautamkrishnar/blog-post-workflow</li> <li>Image Source - https://unsplash.com/photos/RLw-UC03Gwc</li> </ul> ]]>
</description>
<link>https://iamdarshshah.hashnode.dev/how-to-add-your-recently-published-articles-to-your-github-profile-readme-using-github-actions</link>
<guid isPermaLink="true">https://iamdarshshah.hashnode.dev/how-to-add-your-recently-published-articles-to-your-github-profile-readme-using-github-actions</guid>
<dc:creator>
<![CDATA[ Darsh Shah ]]>
</dc:creator>
<pubDate>Wed, 18 Nov 2020 19:00:11 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1605725649788/1XdfeQRFw.jpeg</cover_image>
</item>
<item>
<title>
<![CDATA[ Start Documenting your Journey ‚úçÔ∏è ]]>
</title>
<description>
<![CDATA[ <p>During these tough times, We're dealing with a lot of things in our daily lifestyle &amp; it's really important to document our progress. But the question would arise here is <code>Do We Really Need to Keep Track of our daily progress?</code>, <code>Why should we keep track of it?</code> &amp; <code>What's the benefit of it?</code>. üôÑ</p> <blockquote> <p>TL;DR This article is for those who want to be successful in their life but they don't know where to start and how to continue developing themselves on the right path.</p> </blockquote> <h3 id="what-do-you-mean-by-documenting-your-journey">ü§î What do you mean by Documenting your Journey?</h3> <p>Many of us have made good progress in our career by this time and it's difficult to remember every single detail of it. You must keep track of every single detail of <code>what you have done</code>, <code>what you're doing</code> &amp; <code>what you'll be doing</code>, irrespective of whether you succeed or not (as everything you do will teach you a lesson).</p> <h3 id="ways-to-start-documenting-your-journey">üí° Ways to start documenting your journey</h3> <ol> <li>Keep a diary with you and start writing about your journey</li> <li>Start Blogging about your journey (It'll help you keep track of your journey)</li> <li>Buy a domain and simply develop your website for keeping track of your blogs.</li> <li>Linkedin - You've to keep your profile up to date with your achievements, experiences, rewards, skills &amp; so on. </li> </ol> <p>There're many platforms you can publish your blogs on such as <a target="_blank" href="https://hashnode.com/">Hashnode</a>, <a target="_blank" href="https://dev.to/">Dev.to</a>, <a target="_blank" href="https://medium.com/">Medium</a> or it can even be your website.</p> <blockquote> <p>üí™ Just get out of your comfort zone &amp; start writing!! <code>STOP making Excuses</code></p> </blockquote> <h3 id="whats-the-easiest-thing-you-should-blog-about">ü§Ø What's the easiest thing You should blog about?</h3> <blockquote> <p>Are you, someone struggling with finding the right topic to blog on? If you said <code>Yes</code>, then this section will be an answer to this particular question and after this, you'll be confident enough to find the right topic &amp; be consistent with your writings.</p> </blockquote> <p>In this section, I'll introduce you to something which is pretty straight forward and all of us know about it very well, but then too we're facing difficulties in finding the right topic to blog on!!!</p> <p>That thing is...</p> <p>YOUR DAILY UPDATES.</p> <p>Yes, You read it correctly! </p> <p>This is the simplest thing you can write on daily basis. Yes, this is what you can start with and it will eventually lead you to document your journey. üòÑ</p> <p>I know, what you're thinking about. You already knew this, right? Then what's something that keeps you away from documenting your daily progress? (Just Ask Yourself!) üßê</p> <h3 id="lets-talk-about-the-benefits-of-documenting-your-journey">ü§ì Let's talk about the benefits of Documenting your Journey</h3> <ol> <li>This'll help you to keep track of every single thing you did till now.</li> <li>This'll gonna help someone in finding the right path after reading about your journey if they are struggling with some problem you had once.</li> <li>Gradually, you will be good at your writing and reading skills (This is one of the reasons why I've started writing)</li> <li>It'll gonna help you in your bad times to boost your confidence and to remind you about Who you're &amp; what you can achieve.</li> </ol> <h3 id="conclusion">‚õ≥Ô∏è Conclusion</h3> <p>Doesn't matter what profession you possess, but if you want to be successful then start with documenting your journey. </p> <p>I know, you're afraid to start documenting your journey because you might be thinking about whether it'll be interesting or valuable enough for readers. But the key here is to start writing. It might be valuable for some people and might not for others. The only thing that matters is You being consistent while Documenting your Journey.</p> <p>Now, It's your time to start writing about your journey and share it with the community. You never know what might help someone. ü§ù</p> <p>Just a reminder, You're awesome! You're doing great! Keep working hard and start writing about anything that comes to your mind. üôå</p> <p>Thanks, for reading it till the end. üôè</p> <hr /> <p>Let me know your thoughts on this in the comments section. If you think this is helpful, do share it with your friends and colleagues. Feel free to connect with me on any of the platforms below! üöÄ</p> <p> <a target="_blank" href="https://twitter.com/iamdarshshah">Twitter</a>, <a target="_blank" href="https://www.linkedin.com/in/iamdarshshah/">LinkedIn</a> &amp; <a target="_blank" href="https://github.com/iamdarshshah">GitHub</a>.</p> <hr /> <h4 id="references">References</h4> <ul> <li>Image source: https://unsplash.com/photos/mEsK3u2ZpOE</li> </ul> ]]>
</description>
<link>https://iamdarshshah.hashnode.dev/start-documenting-your-journey</link>
<guid isPermaLink="true">https://iamdarshshah.hashnode.dev/start-documenting-your-journey</guid>
<dc:creator>
<![CDATA[ Darsh Shah ]]>
</dc:creator>
<pubDate>Sun, 15 Nov 2020 19:05:12 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1605465999888/2KXLXxQJL.jpeg</cover_image>
</item>
<item>
<title>
<![CDATA[ Object.freeze() in JavaScript ]]>
</title>
<description>
<![CDATA[ <p>Many of us have the same doubts regarding "How <code>Object.freeze()</code> method works in JavaScript?" ü§î</p> <p>Isn't it? üôÑ</p> <p>A couple of days back, I received a Developer Newsletter email from <a target="_blank" href="https://auth0.com/">Auth0</a> &amp; got to know about the November Coding Challenge (will share the challenge later in this blog) they have rolled out. That challenge has to do with <code>Object.freeze()</code> and I faced the same question at that time and thought of writing a blog on that. ‚úçÔ∏è</p> <p>So, here it is! üéâ</p> <blockquote> <p>Before we try that Coding Challenge, Let's first understand <code>Object.freeze()</code> method's working. ‚öôÔ∏è</p> </blockquote> <h3 id="objectfreeze-method">Object.freeze() Method</h3> <p>The <code>Object.freeze()</code> method freezes an object. By freezing I mean, that object can no longer be mutated i.e., freezing an object will prevent the addition of new property, deletion of any property, or altering the existing property.</p> <p>You would have gained a basic understanding of what <code>Object.freeze()</code> method will do. But, don't panic if you didn't get any idea yet. Will walk you through the working of the method with an example.</p> <h4 id="syntax">Syntax:</h4> <pre><code class="lang-js"><span class="hljs-built_in">Object</span>.freeze(obj) <span class="hljs-comment">// `obj` is the object which has to be freezed.</span> </code></pre> <h4 id="example-1">Example - 1:</h4> <pre><code class="lang-js"><span class="hljs-keyword">const</span> fullName = { <span class="hljs-attr">firstName</span>: <span class="hljs-string">'Test'</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">'User'</span> }; <span class="hljs-keyword">const</span> newFullName = <span class="hljs-built_in">Object</span>.freeze(fullName); newFullName.firstName = <span class="hljs-string">'Testing'</span>; <span class="hljs-built_in">console</span>.log(newFullName.firstName); <span class="hljs-comment">// Output: Test</span> </code></pre> <p>In the above example code, the object <code>newFullName</code> has been assigned property from an object <code>fullName</code>, and the properties of <code>fullName</code> object are frozen. Therefore, new property and values are prevented from being added to the <code>newFullName</code> object and <code>fullName</code> object is immutable.</p> <h4 id="example-2">Example - 2:</h4> <p>Let's see what's the effect of <code>Object.freeze()</code> method on an object with the property being the object/array itself. </p> <pre><code class="lang-js"><span class="hljs-keyword">const</span> course = { <span class="hljs-attr">name</span>: <span class="hljs-string">'Intro to ReactJS'</span>, <span class="hljs-attr">author</span>: <span class="hljs-string">'Kect C Doods'</span>, <span class="hljs-attr">info</span>: { <span class="hljs-attr">duration</span>: <span class="hljs-string">'3 hours'</span>, <span class="hljs-attr">platform</span>: <span class="hljs-string">'Youtube'</span> } }; <span class="hljs-built_in">Object</span>.freeze(course); course.name = <span class="hljs-string">'Intro to Next.js'</span>; course.info.duration = <span class="hljs-string">'1.5 hours'</span>; <span class="hljs-built_in">console</span>.log(course.name); <span class="hljs-comment">// Output: Intro to ReactJS</span> <span class="hljs-built_in">console</span>.log(course.info.duration); <span class="hljs-comment">// Output: 1.5 hours</span> </code></pre> <p><code>Object.freeze()</code> method only applies to the immediate properties of an object. This means it will prevent values addition/deletion/reassignment operations only on immediate object properties (<code>name</code> &amp; <code>author</code> in this case). </p> <p>But, if the value of those properties are objects or arrays themselves, then those objects or arrays won't be frozen and they are still mutable (<code>info</code> in this case).</p> <p><strong>Explanation:</strong> As the immediate property <code>name</code> will be frozen and its value will not change. But, <code>info</code> property is an object, and as <code>Object.freeze()</code> performs shallow freeze the output we are getting is the updated value as the child object will not be frozen with this method call.</p> <blockquote> <p>Note: Similar functionality of <code>Object.freeze()</code> method can be seen if the object's property is an array itself.</p> </blockquote> <p><strong>What was the November Coding Challenge?</strong> üßê</p> <p>Now that you know how <code>Object.freeze()</code> works, I would like you to give this challenge a try.</p> <blockquote> <p>Let me know what will be the output of the following code snippet in the comments section. </p> </blockquote> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1605204997714/rskB5QiHH.png" alt="November-Dev-NL-Code-Challenge.png" /></p> <hr /> <blockquote> <p>üí° Key Points: </p> <ol> <li>Object.freeze() method is used to freeze <code>objects</code> &amp; <code>arrays</code>.</li> <li>Object.freeze() method is used to make an object immutable.</li> <li>Object.freeze() method will perform <code>Shallow Freeze</code>.</li> </ol> </blockquote> <p>If you find it useful, do share it on your socials and let me know your question/thoughts in the comment section, and don't forget to try the November Coding challenge. üòõ </p> <p>Woohoo! üéä You made it till the end. Thanks ü§ù</p> <h4 id="references">References:</h4> <ol> <li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze</li> <li>Cover Image: https://unsplash.com/photos/xEh4hvxRKXM</li> </ol> ]]>
</description>
<link>https://iamdarshshah.hashnode.dev/objectfreeze-in-javascript</link>
<guid isPermaLink="true">https://iamdarshshah.hashnode.dev/objectfreeze-in-javascript</guid>
<dc:creator>
<![CDATA[ Darsh Shah ]]>
</dc:creator>
<pubDate>Thu, 12 Nov 2020 19:39:05 GMT</pubDate>
<cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1605206816823/88Y0Weo-D.jpeg</cover_image>
</item>
</channel>
</rss>
